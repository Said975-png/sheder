import React, { useState, useEffect, useRef, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { Mic, MicOff, Volume2 } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useCart } from "@/contexts/CartContext";

interface VoiceControlProps {
  onAddBasicPlan: () => void;
  onAddProPlan: () => void;
  onAddMaxPlan: () => void;
  inNavbar?: boolean;
  onListeningChange?: (isListening: boolean, transcript?: string) => void;
  forceStop?: boolean;
}

export default function VoiceControl({
  onAddBasicPlan,
  onAddProPlan,
  onAddMaxPlan,
  inNavbar = false,
  onListeningChange,
  forceStop = false,
}: VoiceControlProps) {
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [recognitionState, setRecognitionState] = useState<'idle' | 'starting' | 'listening' | 'stopping'>('idle');
  
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const currentAudioRef = useRef<HTMLAudioElement | null>(null);
  const lastCommandRef = useRef<string>("");
  const isProcessingRef = useRef<boolean>(false);
  const shouldRestartRef = useRef<boolean>(false);
  const restartTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const stateUpdateTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const navigate = useNavigate();
  const { getTotalItems, clearCart } = useCart();

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const updateListeningState = useCallback((listening: boolean, transcriptText: string = "") => {
    console.log("üì± Updating state:", { listening, transcriptText: transcriptText.slice(0, 50) });

    if (stateUpdateTimeoutRef.current) {
      clearTimeout(stateUpdateTimeoutRef.current);
    }

    stateUpdateTimeoutRef.current = setTimeout(() => {
      setTranscript(transcriptText);
      onListeningChange?.(listening, transcriptText);
    }, 100);
  }, [onListeningChange]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è
  useEffect(() => {
    // –°–æ–æ–±—â–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ–≤–æ—Ä–µ–Ω–∏—è
    onListeningChange?.(isListening, transcript);
  }, [isSpeaking]); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Speech Recognition
  useEffect(() => {
    if (!("webkitSpeechRecognition" in window) && !("SpeechRecognition" in window)) {
      console.error("Speech Recognition not supported");
      return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognitionRef.current = new SpeechRecognition();

    if (recognitionRef.current) {
      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true;
      recognitionRef.current.lang = "ru-RU";
      recognitionRef.current.maxAlternatives = 1;

      recognitionRef.current.onstart = () => {
        console.log("üé§ Recognition STARTED");
        setRecognitionState('listening');
      };

      recognitionRef.current.onresult = (event) => {
        if (isProcessingRef.current) {
          console.log("‚è≠Ô∏è Skipping result - processing command");
          return;
        }

        let finalTranscript = "";
        let interimTranscript = "";
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const result = event.results[i];
          const text = result[0].transcript.trim();
          
          if (result.isFinal) {
            finalTranscript = text;
          } else {
            interimTranscript = text;
          }
        }

        const currentText = finalTranscript || interimTranscript;
        
        if (currentText && currentText.length > 2 && currentText.length < 100) {
          updateListeningState(true, currentText);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          if (finalTranscript && finalTranscript !== lastCommandRef.current) {
            console.log("üéØ Processing final command:", finalTranscript);
            lastCommandRef.current = finalTranscript;
            isProcessingRef.current = true;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã
            setTimeout(() => {
              processVoiceCommand(finalTranscript);
            }, 500);
          }
        }
      };

      recognitionRef.current.onend = () => {
        console.log("üé§ Recognition ENDED, shouldRestart:", shouldRestartRef.current, "isListening:", isListening);
        setRecognitionState('idle');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (shouldRestartRef.current && isListening && !isSpeaking) {
          console.log("üîÑ Auto-restarting recognition");
          startRecognition();
        }
      };

      recognitionRef.current.onerror = (event) => {
        console.log("‚ùå Recognition error:", event.error);
        setRecognitionState('idle');
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if (event.error === "no-speech" || event.error === "audio-capture") {
          return;
        }
        
        // –î–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        if (shouldRestartRef.current && isListening) {
          setTimeout(() => {
            if (shouldRestartRef.current && isListening && !isSpeaking) {
              startRecognition();
            }
          }, 2000);
        }
      };
    }

    return () => {
      cleanup();
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
  const startRecognition = useCallback(() => {
    if (!recognitionRef.current || recognitionState === 'starting' || recognitionState === 'listening') {
      console.log("‚ùå Cannot start recognition:", { hasRecognition: !!recognitionRef.current, state: recognitionState });
      return;
    }

    if (isSpeaking) {
      console.log("üîä Cannot start - currently speaking");
      return;
    }

    try {
      console.log("üé§ Starting recognition...");
      setRecognitionState('starting');
      shouldRestartRef.current = true;
      recognitionRef.current.start();
    } catch (error) {
      console.log("‚ö†Ô∏è Recognition start failed:", error);
      setRecognitionState('idle');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        if (shouldRestartRef.current && isListening && !isSpeaking) {
          startRecognition();
        }
      }, 1000);
    }
  }, [recognitionState, isSpeaking, isListening]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
  const stopRecognition = useCallback(() => {
    if (!recognitionRef.current) return;

    try {
      console.log("üõë Stopping recognition...");
      shouldRestartRef.current = false;
      setRecognitionState('stopping');
      recognitionRef.current.stop();
    } catch (error) {
      console.log("Error stopping recognition:", error);
      setRecognitionState('idle');
    }
  }, []);

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  const cleanup = useCallback(() => {
    console.log("üßπ Full cleanup");
    shouldRestartRef.current = false;
    isProcessingRef.current = false;
    
    if (restartTimeoutRef.current) {
      clearTimeout(restartTimeoutRef.current);
      restartTimeoutRef.current = null;
    }
    
    if (stateUpdateTimeoutRef.current) {
      clearTimeout(stateUpdateTimeoutRef.current);
      stateUpdateTimeoutRef.current = null;
    }
    
    if (currentAudioRef.current) {
      currentAudioRef.current.pause();
      currentAudioRef.current = null;
    }
    
    stopRecognition();
  }, [stopRecognition]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  useEffect(() => {
    if (forceStop && isListening) {
      console.log("üõë Force stop triggered");
      toggleListening();
    }
  }, [forceStop]);

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
  const resetCommandState = useCallback(() => {
    console.log("üîÑ Resetting command state");
    isProcessingRef.current = false;
    lastCommandRef.current = "";
    updateListeningState(isListening, "");
    
    // –ï—Å–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–ª—É—à–∞—Ç—å - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    if (shouldRestartRef.current && isListening && !isSpeaking) {
      if (restartTimeoutRef.current) {
        clearTimeout(restartTimeoutRef.current);
      }
      
      restartTimeoutRef.current = setTimeout(() => {
        if (shouldRestartRef.current && isListening && !isSpeaking && recognitionState === 'idle') {
          console.log("üîÑ Delayed restart after command");
          startRecognition();
        }
      }, 1500);
    }
  }, [isListening, isSpeaking, recognitionState, startRecognition, updateListeningState]);

  // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
  const playAudio = useCallback((url: string, onComplete?: () => void) => {
    if (isSpeaking) {
      console.log("üîä Already speaking, ignoring audio request");
      return;
    }

    console.log("üîä Starting audio playback");
    setIsSpeaking(true);
    stopRecognition();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ
    if (currentAudioRef.current) {
      currentAudioRef.current.pause();
      currentAudioRef.current = null;
    }

    const audio = new Audio(url);
    currentAudioRef.current = audio;

    const audioCleanup = () => {
      console.log("üîä Audio finished");
      setIsSpeaking(false);
      currentAudioRef.current = null;
      
      setTimeout(() => {
        resetCommandState();
        onComplete?.();
      }, 1000);
    };

    audio.onended = audioCleanup;
    audio.onerror = () => {
      console.error("üîä Audio error");
      audioCleanup();
    };

    audio.play().catch((error) => {
      console.error("üîä Failed to play audio:", error);
      audioCleanup();
    });
  }, [isSpeaking, stopRecognition, resetCommandState]);

  // –ê—É–¥–∏–æ —Ñ—É–Ω–∫—Ü–∏–∏
  const speakWelcomeBack = useCallback(() => {
    playAudio("https://cdn.builder.io/o/assets%2F236158b44f8b45f680ab2467abfc361c%2Fd8b2e931609e45c3ad40a718329bc1c4?alt=media&token=78714408-6862-47cc-a4ac-8f778b958265&apiKey=236158b44f8b45f680ab2467abfc361c");
  }, [playAudio]);

  const speakThankYou = useCallback(() => {
    playAudio("https://cdn.builder.io/o/assets%2F4b8ea25f0ef042cbac23e1ab53938a6b%2Fafb1b8a7fc8645a7ab1e8513e8c1faa7?alt=media&token=be057092-6988-45dd-94dc-90427146589d&apiKey=4b8ea25f0ef042cbac23e1ab53938a6b");
  }, [playAudio]);

  const speakAuthenticJarvis = useCallback(() => {
    playAudio("https://cdn.builder.io/o/assets%2Fddde4fe5b47946c2a3bbb80e3bca0073%2F54eb93b1452742b6a1cd87cc6104bb59?alt=media&token=fc948eba-bbcd-485c-b129-d5a0c25cfc74&apiKey=ddde4fe5b47946c2a3bbb80e3bca0073");
  }, [playAudio]);

  const speakShutdown = useCallback(() => {
    playAudio("https://cdn.builder.io/o/assets%2F236158b44f8b45f680ab2467abfc361c%2Fa7471f308f3b4a36a50440bf01707cdc?alt=media&token=9a246f92-9460-41f2-8125-eb0a7e936b47&apiKey=236158b44f8b45f680ab2467abfc361c", () => {
      // –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫ÔøΩÔøΩ—é—á–µ–Ω–∏—è - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      if (isListening) {
        toggleListening();
      }
    });
  }, [playAudio, isListening]);

  const speakSystemsOperational = useCallback(async () => {
    try {
      const response = await fetch("/api/elevenlabs-tts", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          text: "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
          voice_id: "YyXZ45ZTmrPak6Ecz0mK",
        }),
      });

      if (response.ok) {
        const audioBlob = await response.blob();
        const audioUrl = URL.createObjectURL(audioBlob);
        playAudio(audioUrl, () => {
          URL.revokeObjectURL(audioUrl);
        });
      } else {
        console.log("–î–∂–∞—Ä–≤–∏—Å: –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ");
        resetCommandState();
      }
    } catch (error) {
      console.error("ElevenLabs TTS error:", error);
      console.log("–î–∂–∞—Ä–≤–∏—Å: –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ");
      resetCommandState();
    }
  }, [playAudio, resetCommandState]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  const processVoiceCommand = useCallback((command: string) => {
    console.log("üîß Processing command:", command);
    const cmd = command.toLowerCase().trim();

    // –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      updateListeningState(isListening, "");
    }, 1000);

    // –ö–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if (cmd.includes("–æ—Ç–∫–ª—é—á–∏—Å—å") || cmd.includes("–≤—ã–∫–ª—é—á–∏—Å—å") || cmd.includes("—Å—Ç–æ–ø –¥–∂–∞—Ä–≤–∏—Å")) {
      speakShutdown();
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ "—è –≤–µ—Ä–Ω—É–ª—Å—è"
    if (cmd.includes("—è –≤–µ—Ä–Ω—É–ª—Å—è") || cmd.includes("–¥–∂–∞—Ä–≤–∏—Å —è –∑–¥–µ—Å—å") || cmd.includes("–¥–∂–∞—Ä–≤–∏—Å —è –≤–µ—Ä–Ω—É–ª—Å—è")) {
      speakWelcomeBack();
      return;
    }

    // –ö–æ–º–∞–Ω–¥—ã "–∫–∞–∫ –¥–µ–ª–∞"
    if (cmd.includes("–∫–∞–∫ –¥–µ–ª–∞") || cmd.includes("how are you") || cmd.includes("–¥–∂–∞—Ä–≤–∏—Å –∫–∞–∫ –¥–µ–ª–∞")) {
      speakSystemsOperational();
      return;
    }

    // –ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
    if ((cmd.includes("–ø—Ä–∏–≤–µ—Ç") && (cmd.includes("–¥–∂–∞—Ä–≤–∏—Å") || cmd.length <= 15)) || 
        (cmd.includes("hello") && (cmd.includes("jarvis") || cmd.length <= 15)) || 
        (cmd.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") && (cmd.includes("–¥–∂–∞—Ä–≤–∏—Å") || cmd.length <= 20))) {
      speakAuthenticJarvis();
      return;
    }

    // –ö–æ–º–∞–Ω–¥—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    if (cmd.includes("—Å–ø–∞—Å–∏–±–æ") || cmd.includes("–±–ª–∞–≥–æ–¥–∞—Ä—é") || cmd.includes("thank you") || cmd.includes("thanks")) {
      speakThankYou();
      return;
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (cmd.includes("–¥–æ–º–æ–π") || cmd.includes("–≥–ª–∞–≤–Ω–∞—è") || cmd.includes("–Ω–∞ –≥–ª–∞–≤–Ω—É—é")) {
      navigate("/");
      resetCommandState();
      return;
    }

    if (cmd.includes("–≤–æ–π—Ç–∏") || cmd.includes("–ª–æ–≥–∏–Ω") || cmd.includes("–≤—Ö–æ–¥")) {
      navigate("/login");
      resetCommandState();
      return;
    }

    if (cmd.includes("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è") || cmd.includes("–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")) {
      navigate("/signup");
      resetCommandState();
      return;
    }

    if (cmd.includes("–ø—Ä–æ—Ñ–∏–ª—å") || cmd.includes("–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")) {
      navigate("/profile");
      resetCommandState();
      return;
    }

    // –ö–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–æ–≤
    if (cmd.includes("–±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω") || (cmd.includes("–¥–æ–±–∞–≤–∏—Ç—å") && cmd.includes("–±–∞–∑–æ–≤—ã–π"))) {
      onAddBasicPlan();
      resetCommandState();
      return;
    }

    if (cmd.includes("–ø—Ä–æ –ø–ª–∞–Ω") || (cmd.includes("–¥–æ–±–∞–≤–∏—Ç—å") && cmd.includes("–ø—Ä–æ"))) {
      onAddProPlan();
      resetCommandState();
      return;
    }

    if (cmd.includes("–º–∞–∫—Å –ø–ª–∞–Ω") || cmd.includes("–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω") || 
        (cmd.includes("–¥–æ–±–∞–≤–∏—Ç—å") && cmd.includes("–º–∞–∫—Å"))) {
      onAddMaxPlan();
      resetCommandState();
      return;
    }

    // –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    if (cmd.includes("–ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑") || cmd.includes("—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑") || cmd.includes("–≤–Ω–∏–∑")) {
      window.scrollBy(0, 500);
      resetCommandState();
      return;
    }

    if (cmd.includes("–ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö") || cmd.includes("—Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö") || cmd.includes("–≤–≤–µ—Ä—Ö")) {
      window.scrollBy(0, -500);
      resetCommandState();
      return;
    }

    if (cmd.includes("–Ω–∞–≤–µ—Ä—Ö") || cmd.includes("–≤ –Ω–∞—á–∞–ª–æ") || cmd.includes("–≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö")) {
      window.scrollTo(0, 0);
      resetCommandState();
      return;
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    console.log("‚ùì Unknown command:", cmd);
    resetCommandState();
  }, [isListening, updateListeningState, speakShutdown, speakWelcomeBack, speakSystemsOperational, speakAuthenticJarvis, speakThankYou, navigate, resetCommandState, onAddBasicPlan, onAddProPlan, onAddMaxPlan]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const toggleListening = useCallback(() => {
    if (isListening) {
      console.log("üõë Stopping listening");
      setIsListening(false);
      cleanup();
      updateListeningState(false, "");
    } else {
      console.log("üé§ Starting listening");
      setIsListening(true);
      lastCommandRef.current = "";
      isProcessingRef.current = false;
      updateListeningState(true, "");
      startRecognition();
    }
  }, [isListening, cleanup, updateListeningState, startRecognition]);

  return (
    <div className={inNavbar ? "relative" : "fixed bottom-6 right-6 z-50"}>
      <div className={inNavbar ? "flex items-center space-x-2" : "flex flex-col items-end space-y-2"}>
        
        {/* Transcript display */}
        {transcript && !inNavbar && (
          <div className="max-w-xs p-3 bg-black/80 backdrop-blur-lg border border-purple-500/30 rounded-lg text-white text-sm">
            {transcript}
          </div>
        )}

        {/* Voice control button */}
        <Button
          onClick={toggleListening}
          className={`w-14 h-14 rounded-full p-0 transition-all duration-300 bg-transparent hover:bg-white/10 ${
            isListening ? "animate-pulse" : ""
          } ${isSpeaking ? "ring-4 ring-blue-400/50" : ""}`}
          disabled={isSpeaking}
        >
          {isSpeaking ? (
            <Volume2 className="w-6 h-6 text-white animate-pulse" />
          ) : isListening ? (
            <Mic className="w-6 h-6 text-white" />
          ) : (
            <MicOff className="w-6 h-6 text-white" />
          )}
        </Button>

        {/* Status indicator */}
        <div className="text-xs text-white/60 text-center">
          {isSpeaking ? "–ì–æ–≤–æ—Ä—é..." : isListening ? "–°–ª—É—à–∞—é..." : "–î–ñ–ê–†–í–ò–°"}
        </div>
      </div>

      {/* Pulse effect when listening */}
      {isListening && (
        <div className="absolute top-0 right-0 w-14 h-14 rounded-full bg-purple-500/30 animate-ping"></div>
      )}
    </div>
  );
}
