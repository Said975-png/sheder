import React, { useState, useEffect, useRef, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { Mic, MicOff, Volume2 } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useCart } from "@/contexts/CartContext";

interface VoiceControlProps {
  onAddBasicPlan: () => void;
  onAddProPlan: () => void;
  onAddMaxPlan: () => void;
  inNavbar?: boolean;
  onListeningChange?: (isListening: boolean, transcript?: string) => void;
  forceStop?: boolean;
  onModelRotateStart?: () => void;
  onModelRotateStop?: () => void;
}

export default function VoiceControl({
  onAddBasicPlan,
  onAddProPlan,
  onAddMaxPlan,
  inNavbar = false,
  onListeningChange,
  forceStop = false,
  onModelRotateStart,
  onModelRotateStop,
}: VoiceControlProps) {
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [transcript, setTranscript] = useState("");
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const currentAudioRef = useRef<HTMLAudioElement | null>(null);
  const lastCommandRef = useRef<string>("");
  const commandTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isPlayingAudioRef = useRef<boolean>(false);
  const navigate = useNavigate();
  const { getTotalItems, clearCart } = useCart();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  const initializeRecognition = useCallback(() => {
    if (!("webkitSpeechRecognition" in window) && !("SpeechRecognition" in window)) {
      console.error("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      return null;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = "ru-RU";
    recognition.maxAlternatives = 1;

    recognition.onstart = () => {
      console.log("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
      setIsListening(true);
      onListeningChange?.(true, "");
    };

    recognition.onresult = (event) => {
      let finalTranscript = "";
      let interimTranscript = "";

      for (let i = 0; i < event.results.length; i++) {
        const result = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += result;
        } else {
          interimTranscript += result;
        }
      }

      const combinedTranscript = (finalTranscript + interimTranscript).trim();

      if (combinedTranscript.length >= 2) {
        setTranscript(combinedTranscript);
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º onListeningChange –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∏–≥–∞–Ω–∏—è
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ÑÔøΩÔøΩ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (finalTranscript.trim()) {
        const command = finalTranscript.trim().toLowerCase();
        console.log("üìù –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        if (command === lastCommandRef.current) {
          console.log("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É:", command);
          return;
        }

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—ÄÔøΩÔøΩ—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
        lastCommandRef.current = command;

        // –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        setTimeout(() => {
          setTranscript("");
          // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º onListeningChange –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∏–≥–∞–Ω–∏—è
        }, 500);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        processVoiceCommand(command);

        // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–∫–∞ÔøΩÔøΩ–∞—Ç—å –Ω–æ–≤—É—é
        setTimeout(() => {
          lastCommandRef.current = "";
          console.log("üßπ –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—â–µ–Ω–∞, –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—É—é");
        }, 1000); // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –≤–º–µ—Å—Ç–æ 2
      }
    };

    recognition.onerror = (event) => {
      console.log("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
      
      if (event.error === "not-allowed") {
        console.error("üö´ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω");
        setIsListening(false);
        onListeningChange?.(false, "");
      }
    };

    recognition.onend = () => {
      console.log("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å");
      
      // –ü–µ—Ä–µ–∑–∞–ø—ÉÔøΩÔøΩ–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ —Å–ª—É—à–∞–µ–º
      if (isListening && !isSpeaking) {
        setTimeout(() => {
          if (isListening && recognitionRef.current) {
            try {
              recognitionRef.current.start();
            } catch (error) {
              console.log("‚ÑπÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É");
              setTimeout(() => {
                if (isListening && recognitionRef.current) {
                  try {
                    recognitionRef.current.start();
                  } catch (e) {
                    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –øÔøΩÔøΩ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å");
                  }
                }
              }, 1000);
            }
          }
        }, 100);
      }
    };

    return recognition;
  }, [isListening, isSpeaking, onListeningChange]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  const processVoiceCommand = useCallback((command: string) => {
    console.log("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É:", command);

    // –ö–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (command.includes("–æ—Ç–∫–ª—é—á–∏—Å—å") || command.includes("–≤—ã–∫–ª—é—á–∏—Å—å")) {
      console.log("üî¥ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è");
      speakShutdown();
      return;
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (command.includes("–¥–∂–∞—Ä–≤–∏—Å") || command.includes("jarvis")) {
      if (command.includes("—è –≤–µ—Ä–Ω—É–ª—Å—è") || command.includes("–ø—Ä–∏–≤–µ—Ç")) {
        speakWelcomeBack();
      } else if (command.includes("–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")) {
        speakFullAccess();
      } else if (command.includes("—Ç—ã —Ç—É—Ç")) {
        speakIAmHere();
      } else {
        speakAuthenticJarvis();
      }
    } else if (command.includes("—Å–ø–∞—Å–∏–±–æ") || command.includes("–±–ª–∞–≥–æ–¥–∞—Ä—é")) {
      speakThankYou();
    } else if (command.includes("–¥–æ–±—Ä–æ–µ —ÉÔøΩÔøΩ—Ä–æ")) {
      speakGoodMorning();
    } else if (command.includes("–∫–∞–∫ –¥–µ–ª–∞")) {
      speakHowAreYou();
    } else if (command.includes("–ø–æ–∫—Ä—É—Ç–∏ –º–æ–¥–µ–ª—å") || command.includes("–ø–æ–≤–µ—Ä–Ω–∏ –º–æ–¥–µ–ª—å")) {
      speakRotateModel();
    } else if (command.includes("—Ö–≤–∞—Ç–∏—Ç") || command.includes("–æ—Å—Ç–∞–Ω–æ–≤–∏")) {
      speakStopModel();
    } else if (command.includes("–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") || command.includes("–ø—Ä–æ–≤–µ—Ä–∫–∞")) {
      speakSystemDiagnostics();
    } else if (command.includes("–ø—Ä–æ–¥–æ–ª–∂–∏–º") || command.includes("–¥–∞–≤–∞–π")) {
      speakContinue();
    } else if (command.includes("–≤–µ—Ä–Ω–æ") || command.includes("–ø—Ä–∞–≤ÔøΩÔøΩ–ª—å–Ω–æ")) {
      speakCorrect();
    } else if (command.includes("–±–∞–∑–æ–≤—ã–π") || command.includes("basic")) {
      onAddBasicPlan();
      speak();
    } else if (command.includes("–ø—Ä–æ") || command.includes("–øÔøΩÔøΩ–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π")) {
      onAddProPlan();
      speak();
    } else if (command.includes("–º–∞–∫—Å") || command.includes("–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π")) {
      onAddMaxPlan();
      speak();
    } else {
      // –îÔøΩÔøΩ—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
      speak();
    }
  }, [onAddBasicPlan, onAddProPlan, onAddMaxPlan, onModelRotateStart, onModelRotateStop]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const toggleListening = useCallback(() => {
    if (isListening) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      setIsListening(false);
      onListeningChange?.(false, "");
      
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", error);
        }
      }
      
      setTranscript("");
      // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
      lastCommandRef.current = "";
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º
      // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ –∑ÔøΩÔøΩ–ø—É—Å–∫–µ –¥–ª—è —Å–≤–µ–∂–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞
      lastCommandRef.current = "";

      if (!recognitionRef.current) {
        recognitionRef.current = initializeRecognition();
      }
      
      if (recognitionRef.current) {
        try {
          recognitionRef.current.start();
        } catch (error) {
          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:", error);
        }
      }
    }
  }, [isListening, onListeningChange, initializeRecognition]);

  // –ò—Å–ø—Ä–∞ÔøΩÔøΩ–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏ÔøΩÔøΩ
  const playAudio = useCallback((url: string, onComplete?: () => void) => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if (isSpeaking) {
      console.log("‚è∏Ô∏è –ê—É–¥–∏–æ —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      return;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ
    if (currentAudioRef.current) {
      try {
        currentAudioRef.current.pause();
        currentAudioRef.current.currentTime = 0;
        currentAudioRef.current = null;
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—É–¥–∏–æ:", error);
      }
    }

    setIsSpeaking(true);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á—Ç–æ–±—ã –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª –∞—É–¥–∏–æ
    const wasListening = isListening;
    if (recognitionRef.current && isListening) {
      try {
        recognitionRef.current.stop();
        console.log("üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤–æ –≤—Ä–µ–º—è –∞—É–¥–∏–æ");
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ:", error);
      }
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—É—é –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    lastCommandRef.current = "";
    console.log("üßπ –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞—É–¥–∏–æ");

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—É–¥–∏–æ
    setTimeout(() => {
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É—à–∞–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
      const wasListeningAtStart = wasListening;
      const audio = new Audio(url);
      currentAudioRef.current = audio;

      audio.onended = () => {
        setIsSpeaking(false);
        currentAudioRef.current = null;

        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
        if (wasListeningAtStart && !recognitionRef.current) {
          console.log("üîä –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –∞—É–¥–∏–æ");
          setTimeout(() => {
            if (!recognitionRef.current) {
              recognitionRef.current = initializeRecognition();
            }
            if (recognitionRef.current) {
              try {
                recognitionRef.current.start();
              } catch (error) {
                console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", error);
              }
            }
          }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }

        onComplete?.();
      };

      audio.onerror = () => {
        setIsSpeaking(false);
        currentAudioRef.current = null;

        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ (–ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É–¥–∏–æ)
        if (wasListeningAtStart && !recognitionRef.current) {
          console.log("üîä –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ");
          setTimeout(() => {
            if (!recognitionRef.current) {
              recognitionRef.current = initializeRecognition();
            }
            if (recognitionRef.current) {
              try {
                recognitionRef.current.start();
              } catch (error) {
                console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", error);
              }
            }
          }, 500);
        }

        console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ");
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µÔøΩÔøΩ–µ–Ω–∏–µ–º
      if (currentAudioRef.current === audio) {
        audio.play().catch((error) => {
          setIsSpeaking(false);
          currentAudioRef.current = null;

          // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ (–ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏)
          if (wasListeningAtStart && !recognitionRef.current) {
            console.log("üîä –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è");
            setTimeout(() => {
              if (!recognitionRef.current) {
                recognitionRef.current = initializeRecognition();
              }
              if (recognitionRef.current) {
                try {
                  recognitionRef.current.start();
                } catch (error) {
                  console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", error);
                }
              }
            }, 500);
          }

          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ:", error);
        });
      }
    }, 50); // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 50–º—Å
  }, [isSpeaking]);

  const speak = () => {
    playAudio("https://cdn.builder.io/o/assets%2F236158b44f8b45f680ab2467abfc361c%2Fdb47541068444a9093b406f29a6af3ce?alt=media&token=43fbc024-64ae-479b-8a6c-5b9d12b43294&apiKey=236158b44f8b45f680ab2467abfc361c");
  };

  const speakShutdown = () => {
    console.log("üî¥ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ");
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    setIsListening(false);
    onListeningChange?.(false, "");
    
    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:", error);
      }
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    lastCommandRef.current = "";
    console.log("üßπ –ö–æ–º–∞–Ω–¥–∞ –æ—áÔøΩÔøΩ—â–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏");

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    playAudio("https://cdn.builder.io/o/assets%2F236158b44f8b45f680ab2467abfc361c%2Fa7471f308f3b4a36a50440bf01707cdc?alt=media&token=9a246f92-9460-41f2-8125-eb0a7e936b47&apiKey=236158b44f8b45f680ab2467abfc361c");
  };

  const speakWelcomeBack = () => {
    playAudio("https://cdn.builder.io/o/assets%2F236158b44f8b45f680ab2467abfc361c%2Fd8b2e931609e45c3ad40a718329bc1c4?alt=media&token=78714408-6862-47cc-a4ac-8f778b958265&apiKey=236158b44f8b45f680ab2467abfc361c");
  };

  const speakFullAccess = () => {
    playAudio("https://cdn.builder.io/o/assets%2F236158b44f8b45f680ab2467abfc361c%2Fd8b2e931609e45c3ad40a718329bc1c4?alt=media&token=78714408-6862-47cc-a4ac-8f778b958265&apiKey=236158b44f8b45f680ab2467abfc361c");
  };

  const speakIAmHere = () => {
    playAudio("https://cdn.builder.io/o/assets%2F4b8ea25f0ef042cbac23e1ab53938a6b%2F5baee2408110417fbab785b0c6ffdde6?alt=media&token=a957a2b4-68ad-46de-bc3e-11943c8fb38b&apiKey=4b8ea25f0ef042cbac23e1ab53938a6b");
  };

  const speakThankYou = () => {
    playAudio("https://cdn.builder.io/o/assets%2F4b8ea25f0ef042cbac23e1ab53938a6b%2Fafb1b8a7fc8645a7ab1e8513e8c1faa7?alt=media&token=be057092-6988-45dd-94dc-90427146589d&apiKey=4b8ea25f0ef042cbac23e1ab53938a6b");
  };

  const speakGoodMorning = () => {
    playAudio("https://cdn.builder.io/o/assets%2F4b8ea25f0ef042cbac23e1ab53938a6b%2F501f46b9470c453e8a6730b05b556d76?alt=media&token=7933c53d-1d4b-4bbe-9be8-d74322cb2e84&apiKey=4b8ea25f0ef042cbac23e1ab53938a6b");
  };

  const speakHowAreYou = () => {
    if ("speechSynthesis" in window) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤–æ –≤—Ä–µ–º—è TTS
      const wasListening = isListening;
      if (recognitionRef.current && isListening) {
        try {
          recognitionRef.current.stop();
          console.log("üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤–æ –≤—Ä–µ–º—è TTS");
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è TTS:", error);
        }
      }

      const utterance = new SpeechSynthesisUtterance("—É –º–µ–Ω—è –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å—ç—Ä");
      utterance.lang = "ru-RU";
      utterance.rate = 0.75;
      utterance.pitch = 0.7;
      utterance.volume = 0.95;

      setIsSpeaking(true);

      utterance.onend = () => {
        setIsSpeaking(false);

        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
        if (wasListening && !recognitionRef.current) {
          console.log("üîä –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ TTS");
          setTimeout(() => {
            if (!recognitionRef.current) {
              recognitionRef.current = initializeRecognition();
            }
            if (recognitionRef.current) {
              try {
                recognitionRef.current.start();
              } catch (error) {
                console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ TTS:", error);
              }
            }
          }, 500);
        }
      };

      utterance.onerror = () => {
        setIsSpeaking(false);

        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ TTS
        if (wasListening && !recognitionRef.current) {
          console.log("üîä –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ TTS");
          setTimeout(() => {
            if (!recognitionRef.current) {
              recognitionRef.current = initializeRecognition();
            }
            if (recognitionRef.current) {
              try {
                recognitionRef.current.start();
              } catch (error) {
                console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏ÔøΩÔøΩ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ TTS:", error);
              }
            }
          }, 500);
        }
      };

      speechSynthesis.speak(utterance);
    }
  };

  const speakAuthenticJarvis = () => {
    playAudio("https://cdn.builder.io/o/assets%2Fddde4fe5b47946c2a3bbb80e3bca0073%2F54eb93b1452742b6a1cd87cc6104bb59?alt=media&token=fc948eba-bbcd-485c-b129-d5a0c25cfc74&apiKey=ddde4fe5b47946c2a3bbb80e3bca0073");
  };

  const speakRotateModel = () => {
    onModelRotateStart?.();
    playAudio("https://cdn.builder.io/o/assets%2F28664c445c564f3b84784ae20e29b5c6%2F3e5bf796358f469d8d209d10e88df9a2?alt=media&token=9a768fb8-b835-43b4-aa44-72650861fdf5&apiKey=28664c445c564f3b84784ae20e29b5c6");
  };

  const speakStopModel = () => {
    onModelRotateStop?.();
    playAudio("https://cdn.builder.io/o/assets%2F28664c445c564f3b84784ae20e29b5c6%2F66456b8b01d0421188b26fac843a5d29?alt=media&token=6ba25f9a-cdbf-48ab-98f4-da121a81fd2e&apiKey=28664c445c564f3b84784ae20e29b5c6");
  };

  const speakSystemDiagnostics = () => {
    playAudio("https://cdn.builder.io/o/assets%2Ff623eb4c005f4a40a75c4b9a0beb1b76%2Fe84cbc4e1b6d4e408263b15a7e68cd11?alt=media&token=db88c399-0c44-4b82-a1eb-251e7fb476b3&apiKey=f623eb4c005f4a40a75c4b9a0beb1b76", () => {
      // –í–æ—ÅÔøΩÔøΩ—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤—Ç–æ—Ä–æ–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        playAudio("https://cdn.builder.io/o/assets%2Ff623eb4c005f4a40a75c4b9a0beb1b76%2Ff74fdea7f34b4c2fa5df3d62bd9efe29?alt=media&token=80cd6e08-efaa-4afd-b3aa-66aa3f68623c&apiKey=f623eb4c005f4a40a75c4b9a0beb1b76");
      }, 2000);
    });
  };

  const speakContinue = () => {
    playAudio("https://cdn.builder.io/o/assets%2F6b72a929cd24415c8486df051bbaa5a2%2F35be1bb3c0f84dab8d368ae39c4dde3c?alt=media&token=39b27ede-43e5-43ac-8175-031ef131c2ef&apiKey=6b72a929cd24415c8486df051bbaa5a2");
  };

  const speakCorrect = () => {
    playAudio("https://cdn.builder.io/o/assets%2F6b72a929cd24415c8486df051bbaa5a2%2F3f0d27eed6164908bd9b24c2c5bc67e1?alt=media&token=5fa73b0b-df79-4f5a-b12c-4d182e8ed23f&apiKey=6b72a929cd24415c8486df051bbaa5a2");
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  useEffect(() => {
    if (forceStop && isListening) {
      setIsListening(false);
      onListeningChange?.(false, "");
      
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", error);
        }
      }
      
      setTranscript("");
    }
  }, [forceStop, isListening, onListeningChange]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
        }
      }
      
      if (currentAudioRef.current) {
        currentAudioRef.current.pause();
      }

      if (commandTimeoutRef.current) {
        clearTimeout(commandTimeoutRef.current);
      }
    };
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    const cleanupInterval = setInterval(() => {
      // –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏–º, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–¥–∏–æ
      if (isSpeaking && !currentAudioRef.current && !speechSynthesis.speaking) {
        console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—á–∏");
        setIsSpeaking(false);
      }
    }, 2000);

    return () => clearInterval(cleanupInterval);
  }, [isSpeaking]);

  if (inNavbar) {
    return (
      <Button
        onClick={toggleListening}
        variant="outline"
        size="sm"
        className={`relative ${
          isListening
            ? "bg-red-500/20 border-red-500/50 text-red-400"
            : "border-slate-600/50 bg-slate-800/50 text-slate-300"
        } hover:bg-slate-700/50 transition-colors`}
      >
        {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
        {transcript && (
          <span className="absolute -top-8 left-0 text-xs bg-slate-800 px-2 py-1 rounded">
            {transcript}
          </span>
        )}
      </Button>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <div className="flex flex-col items-center gap-2">
        {transcript && (
          <div className="bg-slate-900/90 backdrop-blur-sm text-white px-4 py-2 rounded-lg text-sm max-w-xs">
            {transcript}
          </div>
        )}
        
        <Button
          onClick={toggleListening}
          size="lg"
          className={`w-14 h-14 rounded-full shadow-lg transition-all duration-200 ${
            isListening
              ? "bg-red-500 hover:bg-red-600 text-white animate-pulse"
              : "bg-blue-600 hover:bg-blue-700 text-white"
          }`}
        >
          {isListening ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6" />}
        </Button>
        
        {isSpeaking && (
          <div className="flex items-center gap-1">
            <Volume2 className="w-4 h-4 text-blue-400" />
            <span className="text-xs text-slate-400">–ì–æ–≤–æ—Ä—é...</span>
          </div>
        )}
      </div>
    </div>
  );
}
