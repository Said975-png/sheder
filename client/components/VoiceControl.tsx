import React, { useRef, useState, useCallback, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Mic, MicOff, Volume2 } from "lucide-react";
import { cn } from "@/lib/utils";

interface VoiceControlProps {
  onCommand?: (command: string) => void;
  className?: string;
  size?: "sm" | "md" | "lg";
  floating?: boolean;
}

export default function VoiceControl({
  onCommand,
  className,
  size = "lg",
  floating = true,
}: VoiceControlProps) {
  const [isListening, setIsListening] = useState(false);
  const [isPlayingAudio, setIsPlayingAudio] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [isSupported, setIsSupported] = useState(false);

  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const isProcessingRef = useRef(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
  useEffect(() => {
    const supported = "webkitSpeechRecognition" in window || "SpeechRecognition" in window;
    setIsSupported(supported);
  }, []);

  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const startListening = useCallback(() => {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!isSupported || isListening || isPlayingAudio || isProcessingRef.current) {
      console.log("üö´ –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—Ä–æÔøΩÔøΩ–æ–Ω:", {
        isSupported,
        isListening,
        isPlayingAudio,
        isProcessing: isProcessingRef.current
      });
      return;
    }

    try {
      // –ï—Å–ª–∏ recognition —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–µ–º –Ω–æ–≤—ã–π
      if (recognitionRef.current) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ recognition
        try {
          recognitionRef.current.start();
          console.log("üé§ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ recognition");
          return;
        } catch (error) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          console.log("üîÑ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π recognition –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏");
          recognitionRef.current = null;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π recognition —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const recognition = new SpeechRecognition();

      recognition.continuous = true; // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ true –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
      recognition.interimResults = true;
      recognition.lang = "ru-RU";
      recognition.maxAlternatives = 1;

      recognition.onstart = () => {
        console.log("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω - –∂–¥—É –∫–æ–º–∞–Ω–¥—É");
        setIsListening(true);
        isProcessingRef.current = false;
      };

      recognition.onresult = (event) => {
        if (isProcessingRef.current) return;

        let finalTranscript = "";
        let interimTranscript = "";

        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }

        const currentTranscript = (finalTranscript + interimTranscript).trim();
        setTranscript(currentTranscript);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        if (finalTranscript.trim() && !isProcessingRef.current) {
          isProcessingRef.current = true;
          const command = finalTranscript.trim();

          console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞:", command);
          setTranscript("");

          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
          stopListening();

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
          handleVoiceCommand(command);
          onCommand?.(command);
        }
      };

      recognition.onerror = (event) => {
        console.log("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
        setIsListening(false);
        isProcessingRef.current = false;
        recognitionRef.current = null; // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ ÔøΩÔøΩ—à–∏–±–∫–µ (–∫—Ä–æ–º–µ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ)
        if (event.error !== "not-allowed" && event.error !== "service-not-allowed") {
          console.log("‚èπÔ∏è –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, –∂–¥–µ–º —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è");
        }
      };

      recognition.onend = () => {
        console.log("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ÔøΩÔøΩ–∞–≤–µ—Ä—à–µ–Ω–æ");
        setIsListening(false);
        recognitionRef.current = null; // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

        // –ù–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–∫–ª—é—á–∞–µ—Ç
        console.log("‚èπÔ∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∂–¥–µ–º —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è");
      };

      recognitionRef.current = recognition;
      isProcessingRef.current = false;
      setTranscript("");

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      recognition.start();
      console.log("üé§ –ù–æ–≤—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");

    } catch (error) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:", error);
      setIsListening(false);
      recognitionRef.current = null;
      isProcessingRef.current = false;

      // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      setTimeout(() => {
        if (!isListening && !isPlayingAudio && !isProcessingRef.current) {
          startListening();
        }
      }, 3000);
    }
  }, [isSupported, isListening, isPlayingAudio]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const stopListening = useCallback(() => {
    console.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ");
    setIsListening(false);
    setTranscript("");

    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
        console.log("‚úÖ Recognition –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ recognition:", error);
      }
      // –ùÔøΩÔøΩ –æ—á–∏—â–∞–µ–º ref –∑–¥–µ—Å—å, —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç onend
    }
  }, []);

  // –§—É–ΩÔøΩÔøΩ—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const playAudioResponse = useCallback((audioUrl: string, callback?: () => void) => {
    console.log("üîä –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞");
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
    if (isListening) {
      stopListening();
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
    }

    setIsPlayingAudio(true);
    const audio = new Audio(audioUrl);
    audioRef.current = audio;

    audio.onended = () => {
      console.log("‚úÖ –ê—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–ΩÔøΩÔøΩ");
      setIsPlayingAudio(false);
      audioRef.current = null;

      // –í—ã–ø–æ–ª–Ω—è–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
      if (callback) {
        try {
          callback();
          console.log("üîÑ Callback –≤—ã–ø–æ–ª–Ω–µ–Ω");
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≤ callback:", error);
        }
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å–Ω–æ–≤–∞
      isProcessingRef.current = false;
      console.log("üé§ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω...");
      
      setTimeout(() => {
        if (!isListening && !isPlayingAudio) {
          startListening();
          console.log("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞");
        }
      }, 3000); // –£–≤–µ–ª–∏—á–µ–Ω —Å 1000 –¥–æ 3000 (3 —Å–µ–∫—É–Ω–¥—ã)
    };

    audio.onerror = () => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ");
      setIsPlayingAudio(false);
      audioRef.current = null;
      isProcessingRef.current = false;
      
      // –í–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimeout(() => {
        if (!isListening && !isPlayingAudio) {
          startListening();
          console.log("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ");
        }
      }, 3000); // –£–≤–µ–ª–∏—á–µ–Ω —Å 1000 –¥–æ 3000 (3 —Å–µ–∫—É–Ω–¥—ã)
    };

    audio.play().catch((error) => {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ:", error);
      setIsPlayingAudio(false);
      audioRef.current = null;
      isProcessingRef.current = false;
      
      // –í–∫–ª—é—á–∞–µ–º –ºÔøΩÔøΩ–∫—Ä–æ—Ñ–æ–Ω –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
      setTimeout(() => {
        if (!isListening && !isPlayingAudio) {
          startListening();
          console.log("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ ÔøΩÔøΩ–µ—É–¥–∞—á–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è");
        }
      }, 3000); // –£–≤–µ–ª–∏—á–µ–Ω —Å 1000 –¥–æ 3000 (3 —Å–µ–∫—É–Ω–¥—ã)
    });
  }, [isListening, isPlayingAudio, startListening, stopListening]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  const handleVoiceCommand = useCallback((command: string) => {
    const lowerCommand = command.toLowerCase().trim();
    console.log("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ºÔøΩÔøΩ–Ω–¥—É:", lowerCommand);

    // –ö–æ–º–∞–Ω–¥–∞ "–î–∂–∞—Ä–≤–∏—Å —Ç—ã —Ç—É—Ç"
    if (lowerCommand.includes("–¥–∂–∞—Ä–≤–∏—Å —Ç—ã —Ç—É—Ç") || lowerCommand.includes("jarvis —Ç—ã —Ç—É—Ç")) {
      playAudioResponse(
        "https://cdn.builder.io/o/assets%2Fe61c233aecf6402a8a9db34e2dc8f046%2F88f169fa15c74679b0cef82d12ee5f8d?alt=media&token=287c51bf-45be-420b-bd4f-8bdcb60d393c&apiKey=e61c233aecf6402a8a9db34e2dc8f046"
      );
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ "–î–∂–∞—Ä–≤–∏—Å —Å–º–µ–Ω–∏ –º–æ–¥–µ–ª—å"
    if (lowerCommand.includes("–¥–∂–∞—Ä–≤–∏—Å —Å–º–µ–Ω–∏ –º–æ–¥–µ–ª—å") || lowerCommand.includes("jarvis —Å–º–µ–Ω–∏ –º–æ–¥–µ–ª—å")) {
      playAudioResponse(
        "https://cdn.builder.io/o/assets%2Fe61c233aecf6402a8a9db34e2dc8f046%2F91df3aea397c4fbba9b49e597b4e2cb6?alt=media&token=522412d9-5f3a-454f-851c-dd4228a39931&apiKey=e61c233aecf6402a8a9db34e2dc8f046",
        () => {
          // –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∞—É–¥–∏–æ
          const event = new CustomEvent("changeModel", {
            detail: { 
              newModelUrl: "https://cdn.builder.io/o/assets%2Fe61c233aecf6402a8a9db34e2dc8f046%2F1357ace3fa8347cfa6f565692cad1fb7?alt=media&token=ebe4c351-faec-46fe-9b11-d9c4e4881670&apiKey=e61c233aecf6402a8a9db34e2dc8f046"
            },
          });
          window.dispatchEvent(event);
        }
      );
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ "–≤–µ—Ä–Ω–∏ –º–æ–¥–µ–ª—å"
    if (lowerCommand.includes("–≤–µ—Ä–Ω–∏ –º–æ–¥–µ–ª—å")) {
      playAudioResponse(
        "https://cdn.builder.io/o/assets%2Fe61c233aecf6402a8a9db34e2dc8f046%2F2562e9998e1d4afc90ded9608258444e?alt=media&token=1786dd2e-6e68-4c76-93fe-77066a4a2ecf&apiKey=e61c233aecf6402a8a9db34e2dc8f046",
        () => {
          // –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
          const event = new CustomEvent("changeModel", {
            detail: { 
              newModelUrl: "https://cdn.builder.io/o/assets%2F4349887fbc264ef3847731359e547c4f%2F14cdeb74660b46e6b8c349fa5339f8ae?alt=media&token=fa99e259-7582-4df0-9a1e-b9bf6cb20289&apiKey=4349887fbc264ef3847731359e547c4f"
            },
          });
          window.dispatchEvent(event);
        }
      );
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ "—Å–ø–∞—Å–∏–±–æ"
    if (lowerCommand.includes("—Å–ø–∞—Å–∏–±–æ")) {
      playAudioResponse(
        "https://cdn.builder.io/o/assets%2Fe61c233aecf6402a8a9db34e2dc8f046%2Fec5bfbae691b41d9b374b39e75694179?alt=media&token=75301093-1e6e-469a-a492-3105aee95cc9&apiKey=e61c233aecf6402a8a9db34e2dc8f046"
      );
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
    if (lowerCommand.includes("–ø—èÔøΩÔøΩ–Ω–∏—Ü–∞")) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç —Å –ü—è—Ç–Ω–∏—Ü–µ–π
      console.log("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç:", command);
      
      // –ü—Ä–æ—Å—Ç–æ–π –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç
      playAudioResponse(
        "https://cdn.builder.io/o/assets%2Fe61c233aecf6402a8a9db34e2dc8f046%2F88f169fa15c74679b0cef82d12ee5f8d?alt=media&token=287c51bf-45be-420b-bd4f-8bdcb60d393c&apiKey=e61c233aecf6402a8a9db34e2dc8f046"
      );
      return;
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –æ–±—Ä–∞—Ç–Ω–æ
    console.log("‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω");
    isProcessingRef.current = false;
    setTimeout(() => {
      if (!isListening && !isPlayingAudio) {
        startListening();
        console.log("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
      }
    }, 4000); // –£–≤–µ–ª–∏—á–µ–Ω —Å 2000 –¥–æ 4000 (4 —Å–µ–∫—É–Ω–¥—ã)
  }, [playAudioResponse, startListening, isListening, isPlayingAudio]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  useEffect(() => {
    if (isSupported) {
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      const timer = setTimeout(() => {
        if (!isListening && !isPlayingAudio && !isProcessingRef.current) {
          startListening();
        }
      }, 10000); // –£–≤–µ–ª–∏—á–µ–Ω —Å 3000 –¥–æ 10000 (10 —Å–µ–∫—É–Ω–¥)

      return () => clearTimeout(timer);
    }
  }, [isSupported]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ VoiceControl");

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º recognition
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
          recognitionRef.current = null;
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ recognition:", error);
        }
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
      isProcessingRef.current = false;
    };
  }, []);

  if (!isSupported) {
    return (
      <div className={cn("text-sm text-gray-500", className)}>
        –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      </div>
    );
  }

  const sizeClasses = {
    sm: "w-12 h-12",
    md: "w-16 h-16", 
    lg: "w-20 h-20",
  };

  const iconSizes = {
    sm: "w-5 h-5",
    md: "w-7 h-7",
    lg: "w-9 h-9",
  };

  if (floating) {
    return (
      <div className={cn("fixed bottom-6 right-6 z-50", className)}>
        <div className="flex flex-col items-center gap-4">
          {/* –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç */}
          {transcript && (
            <div className="bg-black/90 backdrop-blur-sm text-white px-4 py-2 rounded-xl text-sm max-w-xs border border-white/20 shadow-lg">
              <div className="text-white/90">{transcript}</div>
            </div>
          )}

          {/* –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
          <Button
            onClick={() => {
              if (isListening) {
                stopListening();
              } else if (!isPlayingAudio) {
                startListening();
              }
            }}
            className={cn(
              sizeClasses[size],
              "rounded-full shadow-2xl transition-all duration-300 border-2 relative overflow-hidden",
              isPlayingAudio
                ? "bg-green-500 hover:bg-green-600 text-white border-green-400 shadow-green-500/50"
                : isListening
                  ? "bg-red-500 hover:bg-red-600 text-white border-red-400 animate-pulse shadow-red-500/50"
                  : "bg-blue-600 hover:bg-blue-700 text-white border-blue-400 shadow-blue-500/50",
            )}
          >
            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
            {isListening && (
              <div className="absolute inset-0 bg-red-400/20 animate-ping rounded-full" />
            )}
            
            {isPlayingAudio ? (
              <Volume2 className={iconSizes[size]} />
            ) : isListening ? (
              <MicOff className={iconSizes[size]} />
            ) : (
              <Mic className={iconSizes[size]} />
            )}
          </Button>

          {/* –°—Ç–∞—Ç—É—Å */}
          <div className="text-xs text-center font-medium">
            {isPlayingAudio ? (
              <div className="flex items-center gap-2 text-green-400">
                <Volume2 className="w-4 h-4 animate-pulse" />
                <span>–î–∂–∞—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç...</span>
              </div>
            ) : isListening ? (
              <div className="flex items-center gap-2 text-red-400">
                <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse" />
                <span>–°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...</span>
              </div>
            ) : (
              <div className="text-white/60">–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–µ</div>
            )}
          </div>
        </div>
      </div>
    );
  }

  // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
  return (
    <div className={cn("flex items-center gap-3", className)}>
      <Button
        onClick={() => {
          if (isListening) {
            stopListening();
          } else if (!isPlayingAudio) {
            startListening();
          }
        }}
        variant="outline"
        className={cn(
          "w-12 h-12 rounded-full transition-all duration-200",
          isPlayingAudio
            ? "bg-green-500/20 border-green-500/50 text-green-400"
            : isListening
              ? "bg-red-500/20 border-red-500/50 text-red-400 animate-pulse"
              : "bg-blue-500/20 border-blue-500/50 text-blue-400"
        )}
      >
        {isPlayingAudio ? (
          <Volume2 className="w-5 h-5" />
        ) : isListening ? (
          <MicOff className="w-5 h-5" />
        ) : (
          <Mic className="w-5 h-5" />
        )}
      </Button>
      
      {transcript && (
        <div className="bg-black/50 border border-white/20 rounded-lg px-3 py-2 text-sm text-white max-w-xs">
          {transcript}
        </div>
      )}
    </div>
  );
}
