import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Mic, MicOff, Volume2 } from "lucide-react";
import { useVoiceChat } from "@/hooks/useVoiceChat";

export default function VoiceTest() {
  const [lastTranscript, setLastTranscript] = useState("");
  const [responses, setResponses] = useState<string[]>([]);

  const { isListening, isSpeaking, toggleListening, speakText } = useVoiceChat({
    onTranscriptReceived: (text: string) => {
      console.log("–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:", text);
      setLastTranscript(text);
      
      // –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
      let response = "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞";
      
      if (text.toLowerCase().includes("–ø—Ä–∏–≤–µ—Ç")) {
        response = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
      } else if (text.toLowerCase().includes("–∫–∞–∫ –¥–µ–ª–∞")) {
        response = "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!";
      } else if (text.toLowerCase().includes("—Å–ø–∞—Å–∏–±–æ")) {
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!";
      }
      
      setResponses(prev => [...prev, `–í—ã: ${text}`, `–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${response}`]);
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
      setTimeout(() => {
        speakText(response);
      }, 500);
    },
    onTextToSpeech: (text: string) => {
      console.log("–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º:", text);
    },
  });

  const clearHistory = () => {
    setResponses([]);
    setLastTranscript("");
  };

  return (
    <div className="p-6 max-w-md mx-auto bg-white rounded-lg shadow-lg">
      <h2 className="text-xl font-bold mb-4 text-center">–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
      
      <div className="flex justify-center mb-4">
        <Button
          onClick={toggleListening}
          className={`w-16 h-16 rounded-full ${
            isListening 
              ? "bg-red-500 hover:bg-red-600 animate-pulse" 
              : "bg-blue-500 hover:bg-blue-600"
          }`}
        >
          {isListening ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6" />}
        </Button>
      </div>
      
      <div className="text-center mb-4">
        <p className="text-sm text-gray-600">
          {isListening ? "üé§ –°–ª—É—à–∞—é..." : "–ù–∞–∂–º–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞"}
        </p>
        {isSpeaking && (
          <p className="text-sm text-green-600 flex items-center justify-center gap-2">
            <Volume2 className="w-4 h-4" />
            –ì–æ–≤–æ—Ä—é...
          </p>
        )}
      </div>
      
      {lastTranscript && (
        <div className="mb-4 p-3 bg-gray-100 rounded">
          <p className="text-sm"><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:</strong></p>
          <p className="text-sm">{lastTranscript}</p>
        </div>
      )}
      
      <div className="mb-4 max-h-40 overflow-y-auto">
        {responses.map((response, index) => (
          <div 
            key={index} 
            className={`text-sm p-2 mb-1 rounded ${
              response.startsWith("–í—ã:") 
                ? "bg-blue-100 text-blue-800" 
                : "bg-green-100 text-green-800"
            }`}
          >
            {response}
          </div>
        ))}
      </div>
      
      <div className="flex gap-2">
        <Button 
          onClick={clearHistory} 
          variant="outline" 
          size="sm"
          className="flex-1"
        >
          –û—á–∏—Å—Ç–∏—Ç—å
        </Button>
        <Button 
          onClick={() => speakText("–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏")} 
          variant="outline" 
          size="sm"
          className="flex-1"
          disabled={isSpeaking}
        >
          –¢–µ—Å—Ç TTS
        </Button>
      </div>
      
      <div className="mt-4 text-xs text-gray-500">
        <p><strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å:</strong></p>
        <ul>
          <li>‚Ä¢ "–ü—Ä–∏–≤–µ—Ç"</li>
          <li>‚Ä¢ "–ö–∞–∫ –¥–µ–ª–∞?"</li>
          <li>‚Ä¢ "–°–ø–∞—Å–∏–±–æ"</li>
        </ul>
      </div>
    </div>
  );
}
