import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Mic, MicOff, Volume2, AlertCircle } from "lucide-react";
import { useVoiceChat } from "@/hooks/useVoiceChat";

export default function VoiceTest() {
  const [lastTranscript, setLastTranscript] = useState("");
  const [responses, setResponses] = useState<string[]>([]);
  const [commandCount, setCommandCount] = useState(0);
  const [lastCommandTime, setLastCommandTime] = useState<number>(0);

  const { isListening, isSpeaking, toggleListening, speakText } = useVoiceChat({
    onTranscriptReceived: (text: string) => {
      const now = Date.now();
      const timeSinceLastCommand = now - lastCommandTime;
      
      console.log("–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—ÅÔøΩÔøΩ:", text);
      console.log("–í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã:", timeSinceLastCommand, "–º—Å");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞
      if (text === lastTranscript && timeSinceLastCommand < 2000) {
        console.log("‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:", text);
        setResponses(prev => [...prev, `‚ö†Ô∏è –î–£–ë–õ–¨: ${text} (—á–µ—Ä–µ–∑ ${timeSinceLastCommand}–º—Å)`]);
        return;
      }
      
      setLastTranscript(text);
      setLastCommandTime(now);
      setCommandCount(prev => prev + 1);
      
      // –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
      let response = "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞";
      
      if (text.toLowerCase().includes("–ø—Ä–∏–≤–µ—Ç")) {
        response = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
      } else if (text.toLowerCase().includes("–∫–∞–∫ –¥–µ–ª–∞")) {
        response = "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!";
      } else if (text.toLowerCase().includes("—Å–ø–∞—Å–∏–±–æ")) {
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!";
      } else if (text.toLowerCase().includes("–¥–∂–∞—Ä–≤–∏—Å")) {
        response = "–î–∞, —Å—ç—Ä?";
      }
      
      setResponses(prev => [...prev, `${commandCount + 1}. –í—ã: ${text}`, `   –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${response}`]);
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
      setTimeout(() => {
        speakText(response);
      }, 500);
    },
    onTextToSpeech: (text: string) => {
      console.log("–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º:", text);
    },
  });

  const clearHistory = () => {
    setResponses([]);
    setLastTranscript("");
    setCommandCount(0);
    setLastCommandTime(0);
  };

  const testMultipleCommands = () => {
    const commands = ["–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞", "–°–ø–∞—Å–∏–±–æ"];
    let index = 0;
    
    const interval = setInterval(() => {
      if (index < commands.length) {
        console.log("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:", commands[index]);
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const event = new CustomEvent('voiceCommand', { 
          detail: { command: commands[index] } 
        });
        window.dispatchEvent(event);
        index++;
      } else {
        clearInterval(interval);
      }
    }, 1000);
  };

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getStatusColor = () => {
    if (isSpeaking) return "text-green-600";
    if (isListening) return "text-blue-600";
    return "text-gray-600";
  };

  const getStatusText = () => {
    if (isSpeaking && isListening) return "üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω (–≤–æ –≤—Ä–µ–º—è –∞—É–¥–∏–æ)";
    if (isSpeaking) return "üîä –ì–æ–≤–æ—Ä—é...";
    if (isListening) return "üé§ –°–ª—É—à–∞—é...";
    return "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";
  };

  return (
    <div className="p-6 max-w-lg mx-auto bg-white rounded-lg shadow-lg">
      <h2 className="text-xl font-bold mb-4 text-center">–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
      
      <div className="flex justify-center mb-4">
        <Button
          onClick={toggleListening}
          className={`w-16 h-16 rounded-full transition-all ${
            isListening 
              ? "bg-red-500 hover:bg-red-600 animate-pulse" 
              : "bg-blue-500 hover:bg-blue-600"
          }`}
        >
          {isListening ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6" />}
        </Button>
      </div>
      
      <div className="text-center mb-4">
        <p className={`text-sm font-medium ${getStatusColor()}`}>
          {getStatusText()}
        </p>
        <p className="text-xs text-gray-500">
          –ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {commandCount}
        </p>
        {lastTranscript && (
          <p className="text-xs text-green-600">
            ‚úÖ –üÔøΩÔøΩ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
          </p>
        )}
      </div>
      
      {lastTranscript && (
        <div className="mb-4 p-3 bg-gray-100 rounded">
          <p className="text-sm"><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:</strong></p>
          <p className="text-sm">{lastTranscript}</p>
          <p className="text-xs text-gray-500">
            –í—Ä–µ–º—è: {new Date(lastCommandTime).toLocaleTimeString()}
          </p>
        </div>
      )}
      
      <div className="mb-4 max-h-48 overflow-y-auto border rounded p-2">
        {responses.length === 0 ? (
          <p className="text-sm text-gray-500 italic">–ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...</p>
        ) : (
          responses.map((response, index) => (
            <div 
              key={index} 
              className={`text-sm p-1 mb-1 rounded ${
                response.includes("–î–£–ë–õ–¨") 
                  ? "bg-red-100 text-red-800 font-bold" 
                  : response.startsWith("   ") 
                    ? "bg-green-100 text-green-800 ml-4" 
                    : "bg-blue-100 text-blue-800"
              }`}
            >
              {response}
            </div>
          ))
        )}
      </div>
      
      <div className="flex gap-2 mb-4">
        <Button 
          onClick={clearHistory} 
          variant="outline" 
          size="sm"
          className="flex-1"
        >
          –û—á–∏—Å—Ç–∏—Ç—å
        </Button>
        <Button 
          onClick={() => speakText("–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")} 
          variant="outline" 
          size="sm"
          className="flex-1"
          disabled={isSpeaking}
        >
          –¢–µ—Å—Ç TTS
        </Button>
      </div>
      
      <div className="bg-yellow-50 border border-yellow-200 rounded p-3 mb-4">
        <div className="flex items-start gap-2">
          <AlertCircle className="w-4 h-4 text-yellow-600 mt-0.5" />
          <div className="text-xs">
            <p className="font-medium text-yellow-800">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</p>
            <ul className="text-yellow-700 mt-1">
              <li>‚Ä¢ –£–±—Ä–∞–Ω–æ –º–∏–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</li>
              <li>‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥</li>
              <li>‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ</li>
              <li>‚Ä¢ <strong>–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ ÔøΩÔøΩ–æ–º–∞–Ω–¥ (1 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 2)</strong></li>
              <li>‚Ä¢ <strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–∑—É</strong></li>
              <li>‚Ä¢ <strong>üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞</strong></li>
              <li>‚Ä¢ <strong>üîä –ù–µ—Ç –∑–∞–ø–∏—Å–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ —Å–∏—Å—Ç–µ–º—ã</strong></li>
            </ul>
          </div>
        </div>
      </div>
      
      <div className="text-xs text-gray-500">
        <p><strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å:</strong></p>
        <ul>
          <li>‚Ä¢ "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ "–î–∂–∞—Ä–≤–∏—Å"</li>
          <li>‚Ä¢ "–ö–∞–∫ –¥–µ–ª–∞?"</li>
          <li>‚Ä¢ "–°–ø–∞—Å–∏–±–æ"</li>
        </ul>
        <p className="mt-2"><strong>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</strong></p>
        <ul className="text-xs text-gray-600 mt-1">
          <li>‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è</li>
          <li>‚Ä¢ –ö–Ω–æ–ø–∫–∞ –Ω–µ –º–∏–≥–∞–µ—Ç</li>
          <li>‚Ä¢ <strong>–ú–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π</strong></li>
          <li>‚Ä¢ <strong>–°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ –æ—á–∏—â–∞—é—Ç—Å—è</strong></li>
          <li>‚Ä¢ <strong>–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã</strong></li>
          <li>‚Ä¢ <strong>–ù–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—ç—Ö–æ) –æ—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤</strong></li>
        </ul>
      </div>
    </div>
  );
}
