import { useState, useRef, useCallback, useEffect } from "react";

interface UseVoiceRecognitionProps {
  onTranscript?: (text: string) => void;
  onCommand?: (command: string) => void;
  lang?: string;
}

export const useVoiceRecognition = ({
  onTranscript,
  onCommand,
  lang = "ru-RU"
}: UseVoiceRecognitionProps) => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [isSupported, setIsSupported] = useState(false);
  
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const isProcessingRef = useRef(false);
  const restartTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
  useEffect(() => {
    const supported = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
    setIsSupported(supported);
    
    if (!supported) {
      console.warn("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  const initializeRecognition = useCallback(() => {
    if (!isSupported) return null;

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = lang;
    recognition.maxAlternatives = 1;

    recognition.onstart = () => {
      console.log("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–ø—É—â–µ–Ω–æ");
      setIsListening(true);
      isProcessingRef.current = false;
    };

    recognition.onresult = (event) => {
      if (isProcessingRef.current) {
        console.log("‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è");
        return;
      }

      let finalTranscript = "";
      let interimTranscript = "";

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += transcript;
        } else {
          interimTranscript += transcript;
        }
      }

      const currentTranscript = (finalTranscript + interimTranscript).trim();
      
      if (currentTranscript) {
        setTranscript(currentTranscript);
        onTranscript?.(currentTranscript);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ
      if (finalTranscript.trim() && !isProcessingRef.current) {
        isProcessingRef.current = true;
        const command = finalTranscript.trim();
        
        console.log("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É:", command);
        
        // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ
        setTranscript("");
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        requestAnimationFrame(() => {
          onCommand?.(command);
          isProcessingRef.current = false;
          console.log("üîÑ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ");
        });
      }
    };

    recognition.onerror = (event) => {
      console.log("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
      
      if (event.error === "not-allowed" || event.error === "service-not-allowed") {
        console.error("üö´ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω");
        setIsListening(false);
        isProcessingRef.current = false;
        return;
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
      isProcessingRef.current = false;
    };

    recognition.onend = () => {
      console.log("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å");
      
      // –ë—ã—Å—Ç—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–ª—É—à–∞—Ç—å
      if (isListening && !isProcessingRef.current) {
        if (restartTimeoutRef.current) {
          clearTimeout(restartTimeoutRef.current);
        }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        requestAnimationFrame(() => {
          if (isListening && recognitionRef.current) {
            try {
              recognitionRef.current.start();
              console.log("üîÑ –ëÔøΩÔøΩ—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è");
            } catch (error) {
              console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:", error);
            }
          }
        });
      }
    };

    return recognition;
  }, [isSupported, lang, onTranscript, onCommand, isListening]);

  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const startListening = useCallback(() => {
    if (!isSupported) {
      console.warn("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      return;
    }

    if (isListening) {
      console.log("üé§ –£–∂–µ —Å–ª—É—à–∞–µ–º");
      return;
    }

    try {
      if (!recognitionRef.current) {
        recognitionRef.current = initializeRecognition();
      }

      if (recognitionRef.current) {
        isProcessingRef.current = false;
        setTranscript("");
        recognitionRef.current.start();
        console.log("üé§ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å");
      }
    } catch (error) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:", error);
      setIsListening(false);
    }
  }, [isSupported, initializeRecognition, isListening]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const stopListening = useCallback(() => {
    console.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ");
    
    setIsListening(false);
    setTranscript("");
    isProcessingRef.current = false;
    
    if (restartTimeoutRef.current) {
      clearTimeout(restartTimeoutRef.current);
      restartTimeoutRef.current = null;
    }

    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", error);
      }
      recognitionRef.current = null;
    }
  }, []);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const toggleListening = useCallback(() => {
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  }, [isListening, startListening, stopListening]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
        }
      }
      
      if (restartTimeoutRef.current) {
        clearTimeout(restartTimeoutRef.current);
      }
    };
  }, []);

  return {
    isListening,
    transcript,
    isSupported,
    startListening,
    stopListening,
    toggleListening,
  };
};
