import { useState, useRef, useCallback, useEffect } from "react";

interface UseVoiceChatProps {
  onTranscriptReceived: (text: string) => void;
  onTextToSpeech: (text: string) => void;
}

export const useVoiceChat = ({
  onTranscriptReceived,
  onTextToSpeech,
}: UseVoiceChatProps) => {
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const currentAudioRef = useRef<HTMLAudioElement | null>(null);
  const isProcessingRef = useRef(false);
  const restartTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  const initializeRecognition = useCallback(() => {
    if (!("webkitSpeechRecognition" in window) && !("SpeechRecognition" in window)) {
      console.error("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
      return null;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.continuous = true; // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    recognition.interimResults = true; // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    recognition.lang = "ru-RU";
    recognition.maxAlternatives = 1;

    recognition.onstart = () => {
      console.log("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–ø—É—â–µ–Ω–æ");
      setIsListening(true);
    };

    recognition.onresult = (event) => {
      if (isProcessingRef.current || isSpeaking) {
        console.log("‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≥–æ–≤–æ—Ä–∏–º");
        return;
      }

      let finalTranscript = "";
      let interimTranscript = "";

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += transcript;
        } else {
          interimTranscript += transcript;
        }
      }

      const combinedTranscript = (finalTranscript + interimTranscript).trim();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
      if (combinedTranscript.length >= 3) {
        console.log("üéØ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:", combinedTranscript);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        if (finalTranscript && !isProcessingRef.current) {
          isProcessingRef.current = true;
          console.log("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É:", finalTranscript);
          
          onTranscriptReceived(finalTranscript.trim());
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => {
            isProcessingRef.current = false;
            console.log("üîÑ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ");
          }, 1000);
        }
      }
    };

    recognition.onerror = (event) => {
      console.log("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
      
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      if (event.error === "not-allowed" || event.error === "service-not-allowed") {
        console.error("üö´ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω");
        setIsListening(false);
        return;
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      console.log("‚ÑπÔ∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –øÔøΩÔøΩ–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å");
    };

    recognition.onend = () => {
      console.log("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å");
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–ª—É—à–∞—Ç—å
      if (isListening && !isProcessingRef.current) {
        console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ");
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        if (restartTimeoutRef.current) {
          clearTimeout(restartTimeoutRef.current);
        }
        
        restartTimeoutRef.current = setTimeout(() => {
          if (isListening && recognitionRef.current) {
            try {
              recognitionRef.current.start();
            } catch (error) {
              console.log("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ");
            }
          }
        }, 100);
      }
    };

    return recognition;
  }, [isListening, isSpeaking, onTranscriptReceived]);

  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const startListening = useCallback(() => {
    if (isSpeaking) {
      console.log("‚è∏Ô∏è –ù–µ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–ª—É—à–∞—Ç—å - —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏–º");
      return;
    }

    try {
      if (!recognitionRef.current) {
        recognitionRef.current = initializeRecognition();
      }

      if (recognitionRef.current) {
        recognitionRef.current.start();
        isProcessingRef.current = false;
        console.log("üé§ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å");
      }
    } catch (error) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:", error);
    }
  }, [isSpeaking, initializeRecognition]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const stopListening = useCallback(() => {
    console.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ");
    
    setIsListening(false);
    isProcessingRef.current = false;
    
    if (restartTimeoutRef.current) {
      clearTimeout(restartTimeoutRef.current);
      restartTimeoutRef.current = null;
    }

    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", error);
      }
      recognitionRef.current = null;
    }
  }, []);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const toggleListening = useCallback(() => {
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  }, [isListening, startListening, stopListening]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ ElevenLabs —Å fallback –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS
  const speakText = useCallback(async (text: string) => {
    if (isSpeaking) {
      console.log("‚è∏Ô∏è –£–∂–µ –≥–æ–≤–æ—Ä–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      return;
    }

    console.log("üîä –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å:", text);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ
    if (currentAudioRef.current) {
      try {
        currentAudioRef.current.pause();
        currentAudioRef.current.currentTime = 0;
        currentAudioRef.current = null;
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—É–¥–∏–æ:", error);
      }
    }

    setIsSpeaking(true);
    isProcessingRef.current = true;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –≥–æ–≤–æ—Ä–∏–º
    const wasListening = isListening;
    if (wasListening && recognitionRef.current) {
      try {
        recognitionRef.current.stop();
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ—á–∏:", error);
      }
    }

    try {
      // –ü—Ä–æ–±—É–µ–º ElevenLabs API
      const response = await fetch("/api/elevenlabs-tts", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text: text,
          voice_id: "xybB2n1F05JZpVVx92Tu", // –ö–∞—Å—Ç–æ–º–Ω—ã–π –≥–æ–ª–æ—Å –ü—è—Ç–Ω–∏—Ü—ã
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      currentAudioRef.current = audio;

      audio.onended = () => {
        URL.revokeObjectURL(audioUrl);
        setIsSpeaking(false);
        isProcessingRef.current = false;
        currentAudioRef.current = null;
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
        if (wasListening) {
          console.log("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ—á–∏");
          setTimeout(() => {
            if (!isListening) {
              startListening();
            }
          }, 500);
        }
        
        onTextToSpeech(text);
      };

      audio.onerror = () => {
        URL.revokeObjectURL(audioUrl);
        setIsSpeaking(false);
        isProcessingRef.current = false;
        currentAudioRef.current = null;
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ ElevenLabs");
        
        if (wasListening) {
          startListening();
        }
      };

      await audio.play();
    } catch (error) {
      console.error("‚ùå ElevenLabs –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS:", error);
      
      // Fallback –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS
      if ("speechSynthesis" in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = "ru-RU";
        utterance.rate = 0.8;
        utterance.pitch = 1.1;
        utterance.volume = 0.9;

        // –ò—â–µ–º –∂–µ–Ω—Å–∫–∏–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        const voices = speechSynthesis.getVoices();
        const femaleRussianVoice = voices.find(
          (voice) =>
            voice.lang.includes("ru") &&
            (voice.name.toLowerCase().includes("–∂–µ–Ω—Å–∫–∏–π") ||
              voice.name.toLowerCase().includes("female") ||
              voice.name.toLowerCase().includes("anna") ||
              voice.name.toLowerCase().includes("–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞"))
        );

        if (femaleRussianVoice) {
          utterance.voice = femaleRussianVoice;
        }

        utterance.onend = () => {
          setIsSpeaking(false);
          isProcessingRef.current = false;
          
          if (wasListening) {
            console.log("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS");
            setTimeout(() => {
              if (!isListening) {
                startListening();
              }
            }, 500);
          }
          
          onTextToSpeech(text);
        };

        utterance.onerror = () => {
          setIsSpeaking(false);
          isProcessingRef.current = false;
          console.error("‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS");
          
          if (wasListening) {
            startListening();
          }
        };

        speechSynthesis.speak(utterance);
      } else {
        console.log("‚ùå TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        setIsSpeaking(false);
        isProcessingRef.current = false;
        
        if (wasListening) {
          startListening();
        }
        
        onTextToSpeech(text);
      }
    }
  }, [isSpeaking, isListening, startListening, onTextToSpeech]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ—á–∏
  const stopSpeaking = useCallback(() => {
    console.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—á—å");

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ElevenLabs –∞—É–¥–∏–æ
    if (currentAudioRef.current) {
      try {
        currentAudioRef.current.pause();
        currentAudioRef.current.currentTime = 0;
        currentAudioRef.current = null;
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ:", error);
        currentAudioRef.current = null;
      }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ TTS
    if ("speechSynthesis" in window && speechSynthesis.speaking) {
      try {
        speechSynthesis.cancel();
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS:", error);
      }
    }

    setIsSpeaking(false);
    isProcessingRef.current = false;
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", error);
        }
      }
      
      if (currentAudioRef.current) {
        currentAudioRef.current.pause();
      }
      
      if (restartTimeoutRef.current) {
        clearTimeout(restartTimeoutRef.current);
      }
      
      if ("speechSynthesis" in window && speechSynthesis.speaking) {
        speechSynthesis.cancel();
      }
    };
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    const cleanupInterval = setInterval(() => {
      // –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏–º, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–¥–∏–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      if (isSpeaking && !currentAudioRef.current && !speechSynthesis.speaking) {
        console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—á–∏");
        setIsSpeaking(false);
        isProcessingRef.current = false;
      }
      
      // –ï—Å–ª–∏ —Å–ª—É—à–∞–µ–º, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
      if (isListening && !recognitionRef.current && !isProcessingRef.current) {
        console.log("üßπ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–∏—Å—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è");
        startListening();
      }
    }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

    return () => clearInterval(cleanupInterval);
  }, [isListening, isSpeaking, startListening]);

  return {
    isListening,
    isSpeaking,
    toggleListening,
    speakText,
    stopSpeaking,
  };
};
